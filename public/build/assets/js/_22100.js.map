{"version":3,"sources":["_22100.js"],"names":[],"mappingsfile":"_22100.js","sourcesContent":["/**\n * _22100 - Geracao de Remessas de Bojo\n */\n\n;(function(angular) {\n\n    var Ctrl = function($scope,$ajax,$timeout,$filter,$window,$q, gcCollection,gcObject) {\n        var vm = this;\n        \n        vm.PEDIDO_BLOQUEIO_USUARIOS = [];\n        vm.dados    = [];\n        vm.GPS = [];\n        vm.MODELOS = [];\n        vm.TOTAL_GERAL = 0;\n        vm.filtro = {};\n        var GRAVANDO_DADOS = false;\n        var timer;\n        var estacao_update = false;\n        \n        vm.filtrar = function() { \n            \n            loading($('.container-programacao'));\n                   \n                   \n            var data = {};\n            \n            angular.copy(vm.filtro,data);\n            \n            data.data_remessa         = moment(data.data_remessa        ).format('YYYY.MM.DD');\n            data.data_disponibilidade = moment(data.data_disponibilidade).format('YYYY.MM.DD');\n            \n            $ajax.post('/_22100/getNecessidadeItens',data)\n                .then(function(response) {\n\n                    vm.dados = response;\n\n                    var linhas = vm.dados.agrupamento_linhas;\n                    for(var i in linhas)\n                    {\n                        var linha = linhas[i];\n                                                \n                        linha.PERCENTUAL_DEFEITO_CARREGADO = 0; // 0 = nao ; 1 = sim\n                        linha.QUANTIDADE_PROGRAMADA = parseFloat(linha.QUANTIDADE_CAPACIDADE);\n                        \n                        // Calcula a quantidade utilizada\n                        var itens = linha.MODELOS;\n                        for ( var y in itens ) {\n                            var item = itens[y];\n                            vm.Agrupamento.Utilizado(item);\n                        }  \n                        \n                        // Vincula os modelos da linha\n                        linha.MODELOS = [];\n                        var itens = vm.dados.agrupamento_itens;\n                        for(var i in itens)\n                        {\n                            if ( itens[i].LINHA_ID == linha.LINHA_ID && itens[i].TAMANHO == linha.TAMANHO )\n                            {\n                                linha.MODELOS.push(itens[i]);\n                            }\n                        }\n                        \n                        // Vincula as ferramentas da linha\n                        linha.FERRAMENTAS = [];\n                        var ferramentas = vm.dados.ferramentas;\n                        \n                        FerramentaAlocacao(ferramentas);\n                        \n                        for (var j in ferramentas )\n                        {\n                            \n                            if ( linha.LINHA_ID == ferramentas[j].LINHA_ID && linha.TAMANHO == ferramentas[j].TAMANHO ) {\n                                linha.FERRAMENTAS.push(ferramentas[j]);\n                            }\n                        }\n                        \n                        vm.Linha.Saldo(linha);\n                    }\n                    \n                    var itens = vm.dados.agrupamento_itens;\n                    \n                    // Cria os agrupamentos por grupo de produção\n                    vm.MODELOS = gcCollection.distinct(itens, ['MODELO_ID','TAMANHO','COR_ID']);\n                                        \n                    for(var i in itens)\n                    {\n                        var item = itens[i];\n                        \n                        item.checked = true;\n                        \n                        item.HABILITA_PERCENTUAL_DEFEITO = true;\n                        item.PERCENTUAL_DEFEITO = 0;\n                        \n                        gcObject.calcField('TEMPO_PAR',item, function(itemScope) {\n                            \n                            var percentual = 0;\n                            if ( vm.HABILITA_PERCENTUAL_EXTRA ) {\n                                percentual = itemScope.PERCENTUAL_DEFEITO;\n                                itemScope.HABILITA_PERCENTUAL_EXTRA = true;\n                            } else {\n                                itemScope.HABILITA_PERCENTUAL_EXTRA = false;\n                            }\n                            \n                            return parseFloat(itemScope.TEMPO_UNITARIO) * (1+parseFloat(percentual));\n                        });\t   \n                        \n                        \n                        // Vincula os produtos de estoques aos modelos\n                        item.ESTOQUE_PRODUTOS = [];\n                        var consumos          = item.CONSUMO_ALOCACAO;\n                        for ( var y in consumos ) {\n                            var produtos_estoque = vm.dados.produtos_estoque;\n\n                            for ( var i in produtos_estoque ) { \n\n                                if ( produtos_estoque[i].PRODUTO_ID == consumos[y].PRODUTO_ID ) {\n                                    item.ESTOQUE_PRODUTOS.push(produtos_estoque[i]);\n                                }\n                            }\n                        }\n                        \n                        vm.Consumo.Disponibilidade(item);\n                    }\n                    \n                    \n                    var taloes   = vm.dados.taloes_programados;  \n                    var estacoes = vm.dados.estacoes;\n                    for ( var i in estacoes ) {\n                        var estacao = estacoes[i];\n                        var ferramentas = vm.dados.ferramentas;\n                        for (var j in ferramentas )\n                        {\n                            var minutos_estacao    = parseFloat(estacoes[i].MINUTOS);\n                            var minutos_ferramenta = (ferramentas[j].MINUTOS == undefined) ? 0 : parseFloat(ferramentas[j].MINUTOS);\n                            if ( minutos_estacao > minutos_ferramenta ) {\n                                ferramentas[j].MINUTOS = minutos_estacao;\n                            }\n                        }\n                        \n                        estacao.itens_programados = [];\n                        \n                        for ( var y in taloes ) {\n                            var talao = taloes[y];\n                            \n                            if ( \n                                talao.GP_ID   == estacao.GP_ID &&\n                                talao.UP_ID   == estacao.UP_ID &&\n                                talao.ESTACAO == estacao.ESTACAO\n                            ) {\n                                estacao.itens_programados.push(talao);                                \n                            }\n                        }\n                    }\n                    \n                    \n                    // Cria os agrupamentos por grupo de produção\n                    vm.GPS = gcCollection.groupBy(vm.dados.estacoes, ['GP_DESCRICAO','GP_ID','UP_DESCRICAO','UP_ID']);\n                    \n\n                    // Insere os totalizadores iniciais para os grupos de produção\n                    for ( var i in vm.GPS ) {\n\n                        var estacoes = vm.GPS[i].COLLECTION;\n                        for ( var y in estacoes ) {\n                            var estacao = estacoes[y];\n                            vm.Estacao.Totalizador(estacao);\n                        }\n                        \n                        var gp = vm.GPS[i];\n                        vm.Gp.Totalizador(gp);\n                    }\n                    loading('hide');\n                }\n            );\n        };\n        \n        vm.gravar = function () {\n            GRAVANDO_DADOS = true;\n            $timeout(function(){\n                \n                var data = {};\n                \n                angular.copy(vm.filtro,data);\n\n                data.data_remessa         = moment(data.data_remessa        ).format('YYYY.MM.DD');\n                data.data_disponibilidade = moment(data.data_disponibilidade).format('YYYY.MM.DD');\n\n                var dados = {\n                    filtro : data,\n                    linhas : vm.dados.agrupamento_linhas,\n                    estacoes: vm.dados.estacoes,\n                    agrupamentos : vm.dados.agrupamentos\n                };\n\n                $ajax.post('/_22100/gravar',dados)\n                    .then(function(response) {\n                        $window.location.href = '/_22120?remessa=' + response.remessa;\n                    }\n                );\n                GRAVANDO_DADOS = false;\n            });\n        };\n        \n        \n        vm.Linha = {\n            selected : null,\n            filter : '',\n            Programar : function (linha) {\n                \n                try {\n\n                    var estacoes = vm.Estacao.checks;\n\n                    var estacao_selecionada = false;\n                    \n                    this.Select(linha);\n                    vm.Agrupamento.AtualizarDefeitoPercentual().then(function(){\n                        try {\n                            for ( var j in estacoes )\n                            {\n                                if ( !estacoes[j].checked ) continue;\n\n                                estacao_selecionada = true;\n\n\n                                vm.Estacao.Select(estacoes[j]);\n\n                                var itens = vm.Linha.selected.MODELOS;\n\n                                for(var i in itens)\n                                {\n\n                                    if ( \n                                        itens[i].CONSUMO_DISPONIVEL == 1 && \n                                        itens[i].checked            == true\n                                    ) {\n\n                                        if ( itens[i].TEMPO_PAR <= 0 ) continue;\n                                        if ( itens[i].QUANTIDADE_PROGRAMADA <= 0 ) continue;\n\n                                        vm.Agrupamento.Select(itens[i]);\n\n                                        vm.Item.Inserir(itens[i]);\n                                    }\n                                }\n                            }\n\n                            if ( !estacao_selecionada ) {\n                                throw 'Selecione uma estação. Operação cancelada.';\n                            }      \n                        }\n                        catch (err) {\n                            showErro(err + 'Operação cancelada.');\n                        }\n                    });\n                }\n                catch (err) {\n                    showErro(err + 'Operação cancelada.');\n                }\n            },\n            Saldo : function(linha){\n                var itens = linha.MODELOS;\n                var summ = 0;\n\n                for(var i in itens)\n                {\n                    var qtd = (itens[i].QUANTIDADE_TOTAL == undefined) ? 0 : parseFloat(itens[i].QUANTIDADE_TOTAL) - (parseFloat(itens[i].QUANTIDADE_UTILIZADA) || 0);\n                    summ += qtd;\n                }\n\n                linha.QUANTIDADE_SALDO = summ;\n                return summ;\n            },\n            RemessaHistorico : function(linha) {\n                \n                var modalHistorico = function() {\n                    $('#modal-linha-remessa-historico').modal();\n                    $('#modal-linha-remessa-historico').find('.scroll-table').scrollTop(0);\n                };\n                \n                if ( linha.REMESSA_HISTORICO == undefined ) {\n                    var dados = {\n                        LINHA_ID : linha.LINHA_ID,\n                        TAMANHO : linha.TAMANHO,\n                        FAMILIA_ID : vm.filtro.familia_id\n                    };\n\n                    $ajax.post('/_22100/linha-remessa-historico',dados)\n                        .then(function(response) {\n                            linha.REMESSA_HISTORICO = response;      \n                            modalHistorico();\n                        }\n                    );\n                } else {\n                    modalHistorico();\n                }\n            },\n            Select : function (linha) {\n                this.selected = linha;\n                vm.Agrupamento.selected = null;\n                \n                if ( vm.Ferramenta.selected != undefined && (linha.LINHA_ID != vm.Ferramenta.selected.LINHA_ID || linha.TAMANHO != vm.Ferramenta.selected.TAMANHO) ) {\n                    vm.Ferramenta.selected = null;\n                }\n                \n                verificaEstacao();\n                verificaAgrupamento();\n            },\n            FixVsRepeat : function() {\n                $timeout(function(){\n                    $('.linha.scroll-table').scrollTop(0);\n                }, 10);\n            }\n        };\n\n        vm.Agrupamento = {\n            selected : null,\n            index : null,\n            filter : '',\n            filtered : null,\n            checked : true,\n            KeyDown : function (item, $event) {\n                \n                /* Verifica se existe um evento */\n                if ( !($event === undefined) ) {\n                    \n                    /* Verifica se a tecla pressionada foi 'Space' */\n                    if ( $event.keyCode === 32 ) {\n                        $event.preventDefault();\n                        item.checked = !item.checked;\n                        return false;\n                    };\n                    \n//                    /* Verifica se a tecla pressionada foi 'Enter' */\n//                    if ( $event.keyCode === 13 ) {\n//                        \n//                        var elemento = $event.target;\n//                        var step     = parseFloat(elemento.step);\n//                        var valor    = parseFloat(item.QUANTIDADE_PROGRAMADA);\n//                        \n//                        if( (valor % step) == 0 ) {\n//                            vm.Item.Inserir(item); }\n//                        else {\n//                            showErro(valor + ' não é um múltiplo de ' + step + '. Operação cancelada!');\n//                        }\n//                    }\n                }\n            },\n            FiltrarLinha : function(agrupamento) {\n                var item = vm.Linha.selected;\n\n                var result = false;\n\n                if ( item != null ) {\n\n                    if ( item.LINHA_ID == agrupamento.LINHA_ID && item.TAMANHO == agrupamento.TAMANHO ) {\n                        result = true;\n                    }           \n                }\n                \n                return result;\n            },\n            FiltrarEspecial : function() {\n                \n                var itens = vm.Linha.selected.MODELOS;\n                for(var i in itens)\n                {\n                    var item = itens[i];\n                    \n                    var quantidade_especial = 0;\n                    for ( var j in item.AGRUPAMENTO ) {\n                        var agrup = item.AGRUPAMENTO[j];\n\n                        if ( moment(agrup.DATA).toDate() <= vm.filtro.previsao_max_faturamento ) {\n                            quantidade_especial += parseFloat(agrup.QUANTIDADE_TOTAL);\n                        }\n                    }\n                    item.QUANTIDADE_ESPECIAL = quantidade_especial;\n                }\n            },\n            Select : function (agrupamento) {\n                this.selected = agrupamento;\n                this.index    = vm.dados.agrupamento_itens.indexOf(agrupamento);\n            },\n            CheckAll : function(bool) {\n                var itens = this.filtered;\n                \n                for ( var i in itens ) {\n                    itens[i].checked = bool;\n                }\n                \n                this.checked = bool;\n            },\n            Utilizado : function(item){\n\n                var estacoes = vm.dados.estacoes;\n                var index    = vm.dados.agrupamento_itens.indexOf(item);\n                var summ     = 0;\n\n                for(var i in estacoes)\n                {\n                    if ( estacoes[i].itens_programados === undefined ) estacoes[i].itens_programados = [];\n\n                    var itens_programados = estacoes[i].itens_programados;\n                    for( var j in itens_programados )\n                    {\n                        if ( index == itens_programados[j].INDEX_AGRUPAMENTO_ORIGEM ) {\n                            var qtd = (itens_programados[j].QUANTIDADE_PROGRAMADA == undefined) ? 0 : parseFloat(itens_programados[j].QUANTIDADE_PROGRAMADA);\n                            summ += qtd;                             \n                        }\n                    }\n                }\n\n                item.QUANTIDADE_SALDO = item.QUANTIDADE_TOTAL - summ;\n                item.QUANTIDADE_UTILIZADA = summ;\n\n                return summ;\n            },\n            FixVsRepeat : function() {\n                $timeout(function(){\n                    $('.agrupamento.scroll-table').scrollTop(0);\n                }, 10);\n            },\n            AtualizarTempo : function() {\n                $ajax.post('/_22100/modelo-tempo',vm.MODELOS)\n                    .then(function(response) {\n                        gcCollection.merge(vm.dados.agrupamento_itens, response, ['MODELO_ID','TAMANHO','COR_ID'], true, false);\n                        showSuccess('Os dados foram atualizado!');\n                    }\n                );\n            },\n            AtualizarDefeitoPercentual : function() {\n                return $q(function(resolve, reject) {\n                    var linha = vm.Linha.selected;\n                    \n                    if ( !linha.DEFEITOS_LOADED ) {\n                    \n                        $ajax.post('/_22100/sku-defeito-percentual',linha.MODELOS)\n                            .then(function(response) {\n                                for (var i in linha.MODELOS) {\n                                    var modelo = linha.MODELOS[i];\n\n                                    modelo.PERCENTUAL_DEFEITO = response[i].PERCENTUAL_DEFEITO;\n                                }\n                                linha.DEFEITOS_LOADED = true;\n                                resolve(true);\n                            }, function() {\n                                reject(false);\n                            }\n                        );\n                    } else {\n                        resolve(true);\n                    }\n                });\n            }\n        };\n        \n        vm.Consumo = {\n            filtered : {},\n            Filtrar : function(produto) {\n                var item = vm.Agrupamento.selected;\n\n                var result = false;\n\n                if ( item != null ) {\n\n                    var alocacao = item.CONSUMO_ALOCACAO;\n\n                    for (var i = 0, len = alocacao.length; i < len; i++) {\n                        if (alocacao[i].PRODUTO_ID == produto.PRODUTO_ID) {\n                            result = true;\n                            break;\n                        }\n                    }                \n                }\n\n                return result;\n            },\n            Utilizado : function(item){\n                var estacoes = vm.dados.estacoes;\n                var summ = 0;\n\n                for(var i in estacoes)\n                {\n                    if ( estacoes[i].itens_programados === undefined ) break;\n                    \n                    var itens_programados = estacoes[i].itens_programados;\n\n                    for( var j in itens_programados)\n                    {\n                        var consumos = itens_programados[j].CONSUMO_ALOCACAO;\n\n                        for( var y in consumos)\n                        {\n                            if (item.PRODUTO_ID == consumos[y].PRODUTO_ID) {\n                                var qtd = (consumos[y].CONSUMO_QUANTIDADE == undefined) ? 0 : parseFloat(consumos[y].CONSUMO_QUANTIDADE);\n                                summ += qtd;\n                            }\n                        }\n                    }\n                }\n\n                item.UTILIZADO = summ;\n                item.DISPONIVEL = item.ESTOQUE - item.EMPENHADO - item.UTILIZADO;\n                return summ;\n            },\n            Disponibilidade : function(item) {\n\n                item.CONSUMO_DISPONIVEL = 1;\n\n                /* Incializar o array de produtos de consumo do itens a ser programado*/\n                var consumos         = item.CONSUMO_ALOCACAO;\n                var produtos_estoque = item.ESTOQUE_PRODUTOS;\n\n                /* Verifica se ha materia-prima disponivel suficiente para o item a ser programado */\n                for ( var y in consumos ) {\n\n                    var consumo_quantidade = parseFloat(consumos[y].CONSUMO) * parseFloat((item.QUANTIDADE_PROGRAMADA || item.QUANTIDADE_SALDO)); \n\n                    for ( var i in produtos_estoque ) { \n\n                        vm.Consumo.Utilizado(produtos_estoque[i]);\n\n                        if ( produtos_estoque[i].PRODUTO_ID == consumos[y].PRODUTO_ID ) {\n                            var produtos_estoque_disponivel = parseFloat(produtos_estoque[i].DISPONIVEL);\n\n                            if ( consumos[y].PROGRAMAR_SEM_ESTOQUE == 0 && produtos_estoque_disponivel < consumo_quantidade ) \n                            item.CONSUMO_DISPONIVEL = 0;\n\n                            break;\n                        }\n                    }\n                }\n            }\n        };\n        \n        vm.Ferramenta = {\n            selected : null,\n            AutoSelect : function(item) {\n                \n                if ( vm.Estacao.selected == null ) {\n                    showErro('Selecione uma estação');\n                    return false;\n                }\n\n                if ( vm.Agrupamento.selected == null ) {\n                    showErro('Selecione um modelo para programar.');\n                    return false;\n                }\n\n                var ferramentas_filtradas = [];\n\n                ferramentas_filtradas = $filter('filter')(vm.Linha.selected.FERRAMENTAS, vm.Ferramenta.Filtrar.Modelo);\n                ferramentas_filtradas = $filter('filter')(ferramentas_filtradas, vm.Ferramenta.Filtrar.Estacao);\n\n                if ( ferramentas_filtradas[0] == undefined ) {\n                    throw 'Não há ferramentas disponíveis para uso.<br/>Modelo ' + vm.Agrupamento.selected.MODELO_DESCRICAO + ' - ' + vm.Agrupamento.selected.COR_DESCRICAO + '<br/>GP ' + vm.Estacao.selected.GP_DESCRICAO + ' - Estação ' + vm.Estacao.selected.ESTACAO_DESCRICAO + '.<br/>';\n                }\n                \n                /* Captura a quantidade programada da linha */\n                vm.Linha.quantidade_programar = 0;\n                for ( var i in vm.Estacao.selected.itens_programados ) {\n                    var item_estacao = vm.Estacao.selected.itens_programados[i];\n                    \n                    if ( item_estacao.LINHA_ID == item.LINHA_ID && item_estacao.TAMANHO == item.TAMANHO ) {\n                        vm.Linha.quantidade_programar += parseFloat(item_estacao.QUANTIDADE_PROGRAMADA);\n                    }\n                }\n                \n                for ( var i in ferramentas_filtradas ) {\n                    \n                    if ( ferramentas_filtradas[i].UP_UTILIZADA != undefined && ferramentas_filtradas[i].UP_UTILIZADA != vm.Estacao.selected.UP_ID+'-'+vm.Estacao.selected.ESTACAO ) {\n                        continue;\n                    }\n                    \n                    vm.Ferramenta.Select(ferramentas_filtradas[i]);\n\n                    vm.Item.Tempo(item);\n                    \n                    var indisponibilidade = vm.Ferramenta.VerificarIndisponibilidade(item);\n\n                    if ( !indisponibilidade ) {\n                        ferramentas_filtradas[i].UP_UTILIZADA = vm.Estacao.selected.UP_ID+'-'+vm.Estacao.selected.ESTACAO;\n                        break;\n                    }\n                }\n            },\n            Alocar : function(item) {\n                \n                vm.Ferramenta.AutoSelect(item);\n                \n                var indisponibilidade = vm.Ferramenta.VerificarIndisponibilidade(item);\n                \n                if ( ! ( item.QUANTIDADE_PROGRAMADA > 0 ) ) return false;\n                \n                if ( indisponibilidade ) throw new Error(indisponibilidade);\n                \n                if ( item.TEMPO_FIM > vm.Estacao.selected.MINUTOS ) {\n                    throw  new Error('Capacidade de tempo da ferramenta execidida!');\n                }\n                \n                item.FERRAMENTA_ID        = vm.Ferramenta.selected.ID;\n                item.FERRAMENTA_DESCRICAO = vm.Ferramenta.selected.DESCRICAO;\n\n            },\n            VerificarIndisponibilidade : function(item) {\n                var result = false;\n                \n                var item_alocar = item;\n                \n                if ( item_alocar.TEMPO_INICIO == undefined || item_alocar.TEMPO_FIM == undefined) {\n                    result = 'Nao há tempo alimentado para comparação com a ferramenta.';\n                } else {\n\n                    if ( vm.Ferramenta.selected.MINUTOS_ALOCACAO == undefined ) vm.Ferramenta.selected.MINUTOS_ALOCACAO = [];\n\n                    for ( var i in vm.Ferramenta.selected.MINUTOS_ALOCACAO ) {\n\n                        var item = vm.Ferramenta.selected.MINUTOS_ALOCACAO[i];\n\n                        if ( item_alocar.TEMPO_INICIO <= item.TEMPO_INICIO && item_alocar.TEMPO_FIM >= item.TEMPO_FIM ) {\n                            result = 'Conflito de tempo na ferramenta selecionada.<br/>Intervalo desejado: ' + item_alocar.TEMPO_INICIO + ' à ' + item_alocar.TEMPO_FIM + '. Intervalo alocado: ' + item.TEMPO_INICIO + ' à ' + item.TEMPO_FIM + '.<br/>';\n    //                        console.log('Tempo ja ocupado com um intervalo de tempo menor |::::::::::::::::|');\n    //                        console.log('V' + item_alocar.TEMPO_INICIO + ' <= + ' + 'D' + item.TEMPO_INICIO + ' && ' + 'V' + item_alocar.TEMPO_FIM  + ' >= ' + 'D' + item.TEMPO_FIM);\n    //                        break;\n                        }\n\n                        if ( item_alocar.TEMPO_INICIO >= item.TEMPO_INICIO && item_alocar.TEMPO_FIM <= item.TEMPO_FIM ) {\n                            result = 'Conflito de tempo na ferramenta selecionada.<br/>Intervalo desejado: ' + item_alocar.TEMPO_INICIO + ' à ' + item_alocar.TEMPO_FIM + '. Intervalo alocado: ' + item.TEMPO_INICIO + ' à ' + item.TEMPO_FIM + '.<br/>';\n    //                        console.log('Tempo ja ocupado com um intervalo de tempo maior :::::|::::::|:::::');\n    //                        console.log('V' + item_alocar.TEMPO_INICIO + ' >= ' + 'D' + item.TEMPO_INICIO + ' && ' + 'V' + item_alocar.TEMPO_FIM + ' <= ' + 'D' + item.TEMPO_FIM);\n    //                        break;\n                        }\n\n                        if ( item_alocar.TEMPO_INICIO <= item.TEMPO_INICIO && item_alocar.TEMPO_FIM <= item.TEMPO_FIM && item_alocar.TEMPO_FIM >= item.TEMPO_INICIO ) {\n                            result = 'Conflito de tempo na ferramenta selecionada.<br/>Intervalo desejado: ' + item_alocar.TEMPO_INICIO + ' à ' + item_alocar.TEMPO_FIM + '. Intervalo alocado: ' + item.TEMPO_INICIO + ' à ' + item.TEMPO_FIM + '.<br/>';\n    //                        console.log('Tempo ocupado com intervalo de tempo a frente |::::::::|::::::::');\n    //                        console.log('V' + item_alocar.TEMPO_INICIO + ' <= ' + 'D' + item.TEMPO_INICIO + ' && ' + 'V' + item_alocar.TEMPO_FIM + ' <= ' + 'D' + item.TEMPO_FIM + ' && ' + 'V' + item_alocar.TEMPO_FIM + ' >= ' + 'D' + item.TEMPO_INICIO);\n    //                        break;\n                        }\n\n                        if ( item_alocar.TEMPO_INICIO >= item.TEMPO_INICIO && item_alocar.TEMPO_FIM >= item.TEMPO_FIM && item_alocar.TEMPO_INICIO <= item.TEMPO_FIM ) {\n                            result = 'Conflito de tempo na ferramenta selecionada.<br/>Intervalo desejado: ' + item_alocar.TEMPO_INICIO + ' à ' + item_alocar.TEMPO_FIM + '. Intervalo alocado: ' + item.TEMPO_INICIO + ' à ' + item.TEMPO_FIM + '.<br/>';\n    //                        console.log('Tempo ocupado com intervalo de tempo atras ::::::::|::::::::|');\n    //                        console.log('V' + item_alocar.TEMPO_INICIO + ' >= ' + 'D' + item.TEMPO_INICIO + ' && ' + 'V' + item_alocar.TEMPO_INICIO + ' <= ' + 'D' + item.TEMPO_INICIO + ' && ' + 'V' + item_alocar.TEMPO_FIM + ' >= ' + 'D' + item.TEMPO_FIM);\n    //                        break;\n                        }\n\n                    }\n                }\n                \n                return result;\n            },\n            Utilizado : function(ferramenta,to) {\n\n//                    var estacoes = vm.dados.estacoes;\n//                    ferramenta.MINUTOS_ALOCACAO = [];\n//\n//\n//                    for (var i in ferramenta.ALOCACOES) {\n//\n//                        var clone_alocacoes = {};\n//                        angular.copy(ferramenta.ALOCACOES[i], clone_alocacoes);\n//\n//                        var alocacao = clone_alocacoes;\n//\n//                        ferramenta.MINUTOS_ALOCACAO.push({\n//                            TIPO                  : alocacao.TIPO,\n//                            TABELA_ID             : alocacao.TABELA_ID,\n//                            REMESSA_ID            : alocacao.REMESSA_ID,\n//                            REMESSA               : alocacao.REMESSA,\n//                            GP_ID                 : alocacao.GP_ID,\n//                            GP_DESCRICAO          : alocacao.GP_DESCRICAO,\n//                            UP_ID                 : alocacao.UP_ID,\n//                            UP_DESCRICAO          : alocacao.UP_DESCRICAO,\n//                            ESTACAO               : alocacao.ESTACAO,\n//                            ESTACAO_DESCRICAO     : alocacao.ESTACAO_DESCRICAO,\n//                            MODELO_ID             : alocacao.MODELO_ID,\n//                            MODELO_DESCRICAO      : alocacao.MODELO_DESCRICAO,\n//                            COR_ID                : alocacao.COR_ID,\n//                            COR_DESCRICAO         : alocacao.COR_DESCRICAO,\n//                            QUANTIDADE_PROGRAMADA : parseFloat(alocacao.QUANTIDADE_PROGRAMADA),\n//                            DATAHORA_INICIO       : alocacao.DATAHORA_INICIO,\n//                            DATAHORA_FIM          : alocacao.DATAHORA_FIM,\n//                            TEMPO_INICIO          : parseFloat(alocacao.TEMPO_INICIO),\n//                            TEMPO_FIM             : parseFloat(alocacao.TEMPO_FIM),\n//                            MINUTOS_PROGRAMADOS   : parseFloat(alocacao.MINUTOS_PROGRAMADOS),\n//                            TEMPO_ITEM            : parseFloat(alocacao.TEMPO_ITEM)\n//                        });\n//                    }\n//\n//    //                ferramenta.MINUTOS_ALOCACAO = clone_alocacoes;\n//\n//                    for(var i in estacoes)\n//                    {\n//                        var estacao = estacoes[i];\n//                        if ( estacao.itens_programados === undefined ) estacao.itens_programados = [];\n//\n//                        var itens_programados = estacao.itens_programados;\n//\n//                        var tempo_inicio = 0;\n//                        for( var j in itens_programados )\n//                        {\n//                            var item = itens_programados[j];\n////                            var item_anterior = (itens_programados[j-1]) == undefined ? {} : itens_programados[j-1];\n////\n////\n////                            var tempo_setup = parseFloat(item.TEMPO_FERRAMENTA_SETUP) + parseFloat(item.TEMPO_FERRAMENTA_SETUP_AQUECIMENTO);\n////\n////                            // Verifica se haverá um setup de ferramenta\n////                            if (\n////                                item.SETUP &&\n////                                item_anterior.MATRIZ_ID     == item.MATRIZ_ID    &&\n////                                item_anterior.LINHA_ID      == item.LINHA_ID     &&\n////                                item_anterior.TAMANHO       == item.TAMANHO      &&\n////                                item_anterior.FERRAMENTA_ID == item.FERRAMENTA_ID\n////                            ) {\n////                                item.SETUP = false;\n////                                item.MINUTOS_PROGRAMADOS -= tempo_setup;\n////                            } else if (\n////                                !item.SETUP &&\n////                               (itens_programados[0]        == item              ||\n////                                item_anterior.MATRIZ_ID     != item.MATRIZ_ID    ||\n////                                item_anterior.LINHA_ID      != item.LINHA_ID     ||\n////                                item_anterior.TAMANHO       != item.TAMANHO      ||\n////                                item_anterior.FERRAMENTA_ID != item.FERRAMENTA_ID)\n////                            ) {\n////                                item.SETUP = true;\n////                                item.MINUTOS_PROGRAMADOS += tempo_setup;\n////                            }\n////\n////\n////                            item.TEMPO_INICIO = tempo_inicio;\n////\n////                            tempo_inicio += item.MINUTOS_PROGRAMADOS;\n////\n////                            item.TEMPO_FIM    = tempo_inicio - 1;\n////\n////                            if ( item.FERRAMENTA_ID == undefined ) continue;\n//\n//                            var clone_item = {};\n//                            angular.copy(item, clone_item);\n//\n//                            if ( item.FERRAMENTA_ID ==  ferramenta.ID ) {\n//                                ferramenta.MINUTOS_ALOCACAO.push(clone_item);\n//                            }\n//                        }\n//                    }\n\n            },\n            Select : function (ferramenta) {\n                this.selected = ferramenta;\n            },\n            Filtrar : {\n                Linha : function(item) {\n                    var linha  = vm.Linha.selected;\n                    var result = false;\n\n                    if ( linha != null ) {\n\n                        if ( linha.LINHA_ID == item.LINHA_ID && linha.TAMANHO == item.TAMANHO ) {\n                            result = true;\n                        }          \n                    }\n\n                    return result;\n                },\n                Modelo : function(item) {\n                    var modelo  = vm.Agrupamento.selected;\n                    var result = true;\n\n                    if ( modelo != null ) {\n\n//                        if ( modelo.MATRIZ_ID != item.MATRIZ_ID ) {\n//                            result = false;\n//                            if ( item == vm.Ferramenta.selected ) vm.Ferramenta.selected = null;\n//                        }          \n                    }\n\n                    return result;\n                },\n                Estacao : function(item) {\n                    var estacao  = vm.Estacao.selected;\n                    var result = true;\n\n                    if ( estacao != null ) {\n\n                        if ( \n                            estacao.ESTACAO_LARGURA     <  item.LARGURA     ||\n                            estacao.ESTACAO_COMPRIMENTO <  item.COMPRIMENTO ||\n                            estacao.ESTACAO_ALTURA      <  item.ALTURA      ||\n                            estacao.ESTACAO_LARGURA     <= 0                ||\n                            estacao.ESTACAO_COMPRIMENTO <= 0                ||\n                            estacao.ESTACAO_ALTURA      <= 0 \n                        ) {\n                            result = false;\n                            if ( item == vm.Ferramenta.selected ) vm.Ferramenta.selected = null;\n                        }          \n                    }\n\n                    return result;\n                }\n            }\n        };\n        \n        var FerramentaAlocacao = function (newValue, oldValue, scope) {\n            for ( var i in newValue ) {\n                \n                var ferramenta = newValue[i];\n                        \n                vm.Ferramenta.Select(ferramenta);\n                                \n                ferramenta.MINUTOS_ALOCACAO = [];\n                \n                ferramenta.ALOCACAO_REMESSA = null;\n                ferramenta.ALOCACAO_GP_DESCRICAO = null;\n                ferramenta.ALOCACAO_ESTACAO_DESCRICAO = null;\n                \n                for (var i in ferramenta.ALOCACOES) {\n\n                    var clone_alocacoes = {};\n                    angular.copy(ferramenta.ALOCACOES[i], clone_alocacoes);\n\n                    var alocacao = clone_alocacoes;\n\n                    if ( ferramenta.ALOCACAO_REMESSA == null  ) {\n                        ferramenta.ALOCACAO_REMESSA           = alocacao.REMESSA + ' / ' + alocacao.REMESSA_TALAO_ID;\n                        ferramenta.ALOCACAO_GP_DESCRICAO      = alocacao.GP_DESCRICAO;\n                        ferramenta.ALOCACAO_ESTACAO_DESCRICAO = alocacao.ESTACAO_DESCRICAO;\n                    }\n                    \n                    ferramenta.MINUTOS_ALOCACAO.push({\n                        TIPO                  : alocacao.TIPO,\n                        TABELA_ID             : alocacao.TABELA_ID,\n                        REMESSA_ID            : alocacao.REMESSA_ID,\n                        REMESSA               : alocacao.REMESSA,\n                        GP_ID                 : alocacao.GP_ID,\n                        GP_DESCRICAO          : alocacao.GP_DESCRICAO,\n                        UP_ID                 : alocacao.UP_ID,\n                        UP_DESCRICAO          : alocacao.UP_DESCRICAO,\n                        ESTACAO               : alocacao.ESTACAO,\n                        ESTACAO_DESCRICAO     : alocacao.ESTACAO_DESCRICAO,\n                        MODELO_ID             : alocacao.MODELO_ID,\n                        MODELO_DESCRICAO      : alocacao.MODELO_DESCRICAO,\n                        COR_ID                : alocacao.COR_ID,\n                        COR_DESCRICAO         : alocacao.COR_DESCRICAO,\n                        QUANTIDADE_PROGRAMADA : parseFloat(alocacao.QUANTIDADE_PROGRAMADA),\n                        DATAHORA_INICIO       : alocacao.DATAHORA_INICIO,\n                        DATAHORA_FIM          : alocacao.DATAHORA_FIM,\n                        TEMPO_INICIO          : parseFloat(0),\n                        TEMPO_FIM             : parseFloat(10000),\n                        MINUTOS_PROGRAMADOS   : parseFloat(10000),\n                        TEMPO_ITEM            : parseFloat(10000)\n                    });\n                    \n                }\n                \n                var estacoes = vm.dados.estacoes;\n                                \n                for(var i in estacoes)\n                {\n                    var estacao = estacoes[i];\n                    if ( estacao.itens_programados === undefined ) estacao.itens_programados = [];\n\n                    var itens_programados = estacao.itens_programados;\n                    var tempo_inicio = 0;\n                    \n                    for( var j in itens_programados )\n                    {\n                        var item = itens_programados[j];\n                        \n                        if ( item.DATAHORA_INICIO != undefined ) continue;\n                        \n                        var item_anterior = (itens_programados[j-1]) == undefined ? {} : itens_programados[j-1];\n\n                        var tempo_setup = parseFloat(item.TEMPO_FERRAMENTA_SETUP) + parseFloat(item.TEMPO_FERRAMENTA_SETUP_AQUECIMENTO);\n\n                        // Verifica se haverá um setup de ferramenta\n                        if (\n                            item.SETUP &&\n//                            item_anterior.MATRIZ_ID     == item.MATRIZ_ID    &&\n                            item_anterior.LINHA_ID      == item.LINHA_ID     &&\n                            item_anterior.TAMANHO       == item.TAMANHO      &&\n                            item_anterior.FERRAMENTA_ID == item.FERRAMENTA_ID\n                        ) {\n                            item.SETUP = false;\n                            item.MINUTOS_PROGRAMADOS -= tempo_setup;\n                        } else if (\n                            !item.SETUP &&\n                           (itens_programados[0]        == item              ||\n//                            item_anterior.MATRIZ_ID     != item.MATRIZ_ID    ||\n                            item_anterior.LINHA_ID      != item.LINHA_ID     ||\n                            item_anterior.TAMANHO       != item.TAMANHO      ||\n                            item_anterior.FERRAMENTA_ID != item.FERRAMENTA_ID)\n                        ) {\n                            item.SETUP = true;\n                            item.MINUTOS_PROGRAMADOS += tempo_setup;\n                        }\n\n                        item.TEMPO_INICIO = tempo_inicio;\n\n                        if ( item.MINUTOS_PROGRAMADOS != undefined ) {\n                            tempo_inicio += item.MINUTOS_PROGRAMADOS;\n                        }\n\n                        item.TEMPO_FIM    = tempo_inicio - 1;\n                        \n//                        if ( vm.Ferramenta.VerificarIndisponibilidade(item) ) {\n//                            vm.Item.Excluir(estacao,item);\n//                        }\n\n                        if ( item.FERRAMENTA_ID == undefined ) continue;\n\n                        var clone_item = {};\n                        angular.copy(item, clone_item);\n\n                        if ( item.FERRAMENTA_ID == ferramenta.ID ) {\n                            ferramenta.MINUTOS_ALOCACAO.push(clone_item);\n                        }\n                    }\n                }\n                \n                if ( ferramenta.MINUTOS_ALOCACAO.length == 0 ) {\n                    ferramenta.UP_UTILIZADA = undefined;\n                } else {\n                    ferramenta.UP_UTILIZADA = ferramenta.MINUTOS_ALOCACAO[0].UP_ID+'-'+ferramenta.MINUTOS_ALOCACAO[0].ESTACAO;\n                }\n            }\n        };\n        \n        $scope.$watch('vm.Estacao.checks', function (newValue, oldValue, scope) {\n            \n            verificaEstacao();\n        }, true);\n        \n        function verificaEstacao() {\n            \n            if ( vm.Linha.selected != undefined ) {\n                \n                for ( var j in vm.Estacao.checks ) {\n                    var estacao = vm.Estacao.checks[j];\n\n                    estacao.FERRAMENTA_DISPONIVEL = false;\n\n                    for ( var i in vm.Linha.selected.FERRAMENTAS ) {\n                        var ferramenta = vm.Linha.selected.FERRAMENTAS[i];\n\n                        var ferramenta_disponivel = (ferramenta.MINUTOS_ALOCACAO == undefined || ferramenta.MINUTOS_ALOCACAO.length == 0);\n                        var medidas_conferem      = (estacao.ESTACAO_LARGURA     >= ferramenta.LARGURA     &&\n                                                     estacao.ESTACAO_COMPRIMENTO >= ferramenta.COMPRIMENTO &&\n                                                     estacao.ESTACAO_ALTURA      >= ferramenta.ALTURA      && \n                                                     estacao.ESTACAO_LARGURA     > 0 &&\n                                                     estacao.ESTACAO_COMPRIMENTO > 0 &&\n                                                     estacao.ESTACAO_ALTURA      > 0 );\n\n                        if ( ferramenta_disponivel && medidas_conferem ) {\n                            estacao.FERRAMENTA_DISPONIVEL = true;\n                            break;\n                        }     \n                    }\n                }\n            }\n        }\n        \n        function verificaAgrupamento() {\n            \n            if ( vm.Linha.selected != undefined ) {\n                \n                for ( var j in vm.Linha.selected.MODELOS ) {\n                    var modelo = vm.Linha.selected.MODELOS[j];\n\n                    if ( modelo.checked ) {\n                        \n                        modelo.FERRAMENTA_DISPONIVEL = false;\n\n                        for ( var i in vm.Linha.selected.FERRAMENTAS ) {\n                            var ferramenta = vm.Linha.selected.FERRAMENTAS[i];\n\n                            var ferramenta_disponivel = (ferramenta.MINUTOS_ALOCACAO == undefined || ferramenta.MINUTOS_ALOCACAO.length == 0);\n                            var matriz_confere        = true;//(modelo.MATRIZ_ID == ferramenta.MATRIZ_ID);\n\n                            if ( ferramenta_disponivel && matriz_confere ) {\n                                modelo.FERRAMENTA_DISPONIVEL = true;\n                                break;\n                            }     \n                        }\n                    }\n                }\n            }\n        }\n        \n        function AtualizarDadosGeral() {\n            estacao_update = false;\n            FerramentaAlocacao(vm.Linha.selected.FERRAMENTAS);\n\n            var linhas = vm.dados.agrupamento_linhas;\n            for ( var i in linhas ) {\n\n                var itens = linhas[i].MODELOS;\n                for ( var y in itens ) {\n                    var item = itens[y];\n                    vm.Agrupamento.Utilizado(item);\n                    vm.Consumo.Disponibilidade(item);\n                }                    \n\n                vm.Linha.Saldo(linhas[i]);\n            }\n\n            vm.TOTAL_GERAL = 0;\n            for ( var i in vm.GPS ) {\n\n                var estacoes = vm.GPS[i].COLLECTION;\n                for ( var y in estacoes ) {\n                    var estacao = estacoes[y];\n                    vm.Estacao.Totalizador(estacao);\n                }\n\n                var gp = vm.GPS[i];\n                vm.Gp.Totalizador(gp);\n                vm.TOTAL_GERAL += gp.QUANTIDADE_PROGRAMADA;\n            }\n        }\n        \n        $scope.$watch('vm.dados.estacoes', function (newValue, oldValue, scope) {\n            \n            if ( estacao_update ) {\n                AtualizarDadosGeral();\n            }\n        }, true);\n        \n        vm.Gp = {\n            selected_id : null,\n            pares_programados : 0,\n            minutos : 0,\n            minutos_programados : 0,\n            percentual_utilizado_desc : 0,\n            percentual_utilizado_asc : 0,\n            Totalizador : function (gp) {\n                \n                gp.QUANTIDADE_PROGRAMADA  = 0;\n                gp.MINUTOS                = 0;\n                gp.MINUTOS_PROGRAMADOS    = 0;\n                gp.QUANTIDADE_FERRAMENTAS = 0;\n\n                var estacoes = gp.COLLECTION;\n                \n                for(var i in estacoes) {\n                    var estacao = estacoes[i];\n                    gp.QUANTIDADE_PROGRAMADA   = gp.QUANTIDADE_PROGRAMADA  + (parseFloat(estacao.PARES_PROGRAMADOS  ) || 0);\n                    gp.MINUTOS                 = gp.MINUTOS             + (parseFloat(estacao.MINUTOS            ) || 0);\n                    gp.MINUTOS_PROGRAMADOS     = gp.MINUTOS_PROGRAMADOS + (parseFloat(estacao.MINUTOS_PROGRAMADOS) || 0);\n                    gp.QUANTIDADE_FERRAMENTAS += estacao.QUANTIDADE_FERRAMENTAS;\n                }\n\n                /**\n                 * Calculo de Percentual Utilizado\n                 */\n                var calculo = ((gp.MINUTOS > 0) ? (100 - ((gp.MINUTOS_PROGRAMADOS / gp.MINUTOS)*100)) : 100);\n                var result  = (calculo < 0) ? 0 : calculo;\n                \n                gp.PERCENTUAL_UTILIZADO_ASC  = 100 - calculo;\n                gp.PERCENTUAL_UTILIZADO_DESC = result.toFixed(2);\n            }\n        };\n        \n        vm.Estacao = {\n            selected : null,\n            selected_id : null,\n            radiobox : false,\n            index    : -1,\n            checks : [],\n            Check : function(estacao) {\n                \n                estacao.checked = !estacao.checked;\n                \n                if ( estacao.checked ) {\n                    this.checks.push(estacao);\n                } else {\n                    var index = this.checks.indexOf(estacao);\n                    this.checks.splice(index, 1);\n                }\n            },\n            Select : function (estacao) {\n                this.index_id     = vm.dados.estacoes.indexOf(estacao);\n                this.selected     = estacao;\n                this.selected_id  = estacao.ESTACAO;\n                vm.Gp.selected_id = estacao.GP_ID;\n            },\n            Totalizador : function (estacao) {\n                \n                var itens                  = estacao.itens_programados;\n                var pares_programados      = 0;\n                var minutos_programados    = 0;\n                var quantidade_ferramentas = 0;\n                \n                for(var i in itens) {\n                    var item = itens[i];\n                    \n                    if ( item.DATAHORA_INICIO == undefined ) {\n                        pares_programados   = pares_programados   + (parseFloat(item.QUANTIDADE_PROGRAMADA) || 0);\n                        minutos_programados = minutos_programados + (parseFloat(item.MINUTOS_PROGRAMADOS) || 0);\n                    \n                        if ( itens[i-1] == undefined || itens[i-1].FERRAMENTA_ID != item.FERRAMENTA_ID  ) {\n                            quantidade_ferramentas += 1;\n                        }\n                    }\n                }\n\n                estacao.QUANTIDADE_FERRAMENTAS = quantidade_ferramentas;\n                estacao.PARES_PROGRAMADOS      = pares_programados;\n                estacao.MINUTOS_PROGRAMADOS    = minutos_programados;\n                \n                /**\n                 * Calculo de Percentual Utilizado\n                 */\n                var calculo = ((estacao.MINUTOS > 0) ? (100 - ((estacao.MINUTOS_PROGRAMADOS / estacao.MINUTOS)*100)) : 100);\n                var result  = (calculo < 0) ? 0 : calculo;\n                \n                estacao.PERCENTUAL_UTILIZADO_ASC  = 100 - calculo;\n                estacao.PERCENTUAL_UTILIZADO_DESC = result.toFixed(2);\n            }\n        };\n        \n        vm.Item = {\n            linha_selected : null,\n            estacao_selected : null,\n            Tempo : function(item) {\n\n                /* Bloqueio de Limite de Tempo da Estação */\n                var estacao_minutos             = parseFloat(vm.Estacao.selected.MINUTOS);\n                var estacao_minutos_programados = parseFloat(vm.Estacao.selected.MINUTOS_PROGRAMADOS);\n                var item_programado_anterior = vm.Estacao.selected.itens_programados[vm.Estacao.selected.itens_programados.length-1];\n                var quantidade_programada = parseFloat(item.QUANTIDADE_PROGRAMADA); \n                var tempo_unitario        = parseFloat(item.TEMPO_PAR);\n                var tempo_operacional     = quantidade_programada * tempo_unitario;\n                var tempo_setup           = 0;\n\n                item.TEMPO_FERRAMENTA_SETUP = parseFloat(vm.Ferramenta.selected.TEMPO_SETUP);\n                item.TEMPO_FERRAMENTA_SETUP_AQUECIMENTO = parseFloat(vm.Ferramenta.selected.TEMPO_SETUP_AQUECIMENTO);\n\n                // Verifica se haverá um setup de ferramenta\n                if (\n                    vm.Estacao.selected.itens_programados.length < 1 || \n//                    item_programado_anterior.MATRIZ_ID     != item.MATRIZ_ID ||\n                    item_programado_anterior.LINHA_ID      != item.LINHA_ID  ||\n                    item_programado_anterior.TAMANHO       != item.TAMANHO   ||\n                    item_programado_anterior.FERRAMENTA_ID != vm.Ferramenta.selected.ID\n                ) {\n                    item.SETUP = true;\n                    item.HABILITA_FERRAMENTA_SETUP = true;\n                    tempo_setup = parseFloat(item.TEMPO_FERRAMENTA_SETUP);\n\n\n                    if ( vm.Estacao.selected.HABILITA_SETUP_AQUECIMENTO == '1' ) {\n                        tempo_setup += parseFloat(item.TEMPO_FERRAMENTA_SETUP_AQUECIMENTO);\n                        item.HABILITA_FERRAMENTA_SETUP_AQUECIMENTO = true;\n                    } else {\n                        delete item.HABILITA_FERRAMENTA_SETUP_AQUECIMENTO;\n                    }\n\n                } else {\n                    delete item.SETUP;\n                    delete item.HABILITA_FERRAMENTA_SETUP;\n                    tempo_setup = 0;\n                }\n\n                // Verifica se havará setup de limpeza de matriz (só se não houver troca de matriz)\n                if ( !item.SETUP && item_programado_anterior != undefined && item_programado_anterior.COR_ID != item.COR_ID ) {\n\n                    item.HABILITA_COR_SETUP = true;\n                    \n                    for ( var i in item_programado_anterior.CORES_SIMILARES ) {\n                        var cor_similiar = item_programado_anterior.CORES_SIMILARES[i];\n\n                        if ( cor_similiar.COR_ID_2 == item.COR_ID ) {\n                            \n                            delete item.HABILITA_COR_SETUP;\n                            break;\n                        }\n                    }\n                    \n                    if ( item.HABILITA_COR_SETUP ) {\n\n                        tempo_setup += parseFloat(item.COR_TEMPO_SETUP);\n                    }\n                }\n\n                // Verifica se havará tempo de aprovação\n                if ( item_programado_anterior != undefined && item_programado_anterior.COR_ID != item.COR_ID ) {\n\n                    tempo_setup += parseFloat(item.COR_TEMPO_SETUP_APROVACAO);\n                    item.HABILITA_COR_SETUP_APROVACAO = true;\n                } else {\n                    delete item.HABILITA_COR_SETUP_APROVACAO;\n                }\n\n                var minutos_disponiveis = estacao_minutos - estacao_minutos_programados - tempo_setup;\n                var quantidade_exata    = ( tempo_operacional > minutos_disponiveis) ? minutos_disponiveis / tempo_unitario : quantidade_programada;\n                var quantidade_arrend   = quantidade_exata - (quantidade_exata % parseFloat(item.TALAO_DETALHE_COTA)); \n\n                if ( (vm.Linha.quantidade_programar + quantidade_arrend) > parseFloat(vm.Linha.selected.QUANTIDADE_PROGRAMADA) ) {\n                    quantidade_arrend = parseFloat(vm.Linha.selected.QUANTIDADE_PROGRAMADA) - vm.Linha.quantidade_programar;\n                }\n\n                if ( ! ( quantidade_arrend > 0 ) ) throw new Error('aqui nao');\n\n\n                item.QUANTIDADE_PROGRAMADA = quantidade_arrend;\n                \n                gcObject.calcField('MINUTOS_PROGRAMADOS',item, function(itemScope) {\n                    \n                    if ( GRAVANDO_DADOS ) {\n                        itemScope.TEMPO_PAR = itemScope.TEMPO_UNITARIO;\n                    } else {\n                        var percentual = 0;\n                        \n                        if ( itemScope.HABILITA_PERCENTUAL_EXTRA ) {                            \n                            percentual = itemScope.PERCENTUAL_DEFEITO;\n                        }\n                            \n                        itemScope.TEMPO_PAR = parseFloat(itemScope.TEMPO_UNITARIO) * (1+parseFloat(percentual));\n                    }\n                    \n                    return Math.ceil(parseFloat(itemScope.QUANTIDADE_PROGRAMADA) * parseFloat(itemScope.TEMPO_PAR)) + tempo_setup;\n                });\t                \n                \n                gcObject.calcField('TEMPO_ITEM',item, function(itemScope) {\n\n                    return Math.ceil(parseFloat(itemScope.QUANTIDADE_PROGRAMADA) * parseFloat(itemScope.TEMPO_PAR));\n                });\t             \n                \n//                item.MINUTOS_PROGRAMADOS   = Math.ceil(parseFloat(item.QUANTIDADE_PROGRAMADA) * parseFloat(item.TEMPO_PAR)) + tempo_setup;\n//                item.TEMPO_ITEM            = Math.ceil(parseFloat(item.QUANTIDADE_PROGRAMADA) * parseFloat(item.TEMPO_PAR));\n\n                item.TEMPO_INICIO = estacao_minutos_programados;\n                item.TEMPO_FIM    = estacao_minutos_programados + item.MINUTOS_PROGRAMADOS - 1;\n            },\n            Totalizador : function(itens) {\n                return itens.reduce(function(sum, current){\n                    return sum + current.QUANTIDADE_PROGRAMADA;\n                }, 0);\n            },\n            Filtrar : {\n                Linha : function (estacao) {\n                    return function(item) {\n                        var result = false;\n                    \n                        if ( \n                                vm.Item.linha_selected          != undefined     && \n                                vm.Item.estacao_selected        == estacao       && \n                                vm.Item.linha_selected.LINHA_ID == item.LINHA_ID && \n                                vm.Item.linha_selected.TAMANHO  == item.TAMANHO \n                            ) {\n                            result = true;\n                        }\n                        \n                        return result;\n                    };\n                }\n            },\n            Inserir : function(item) {\n                try { \n                    if ( !(item.QUANTIDADE_PROGRAMADA > 0) ) throw 'Quantidade à programar deverá ser maior que zero.';\n                    if ( !(vm.Estacao.selected_id > 0)) throw 'Selecione uma estação.';\n\n                    /* Minutos total da estação            */ var estacao_minutos             = parseFloat(vm.Estacao.selected.MINUTOS);\n                    /* Minutos utilizados da estação       */ var estacao_minutos_programados = parseFloat(vm.Estacao.selected.MINUTOS_PROGRAMADOS);\n                    /* Inicializa a variável à ser clonada */ var clone_item                  = {};\n\n                    if ( ! ( estacao_minutos > 0 ) ) throw 'Não há calendário de produção configurado para a estação selecionada na data de remessa informada.';\n\n                    /* Inicializa o array de itens programados na estação selecionado se não existir */\n                    if ( vm.Estacao.selected.itens_programados === undefined ) vm.Estacao.selected.itens_programados = [];\n\n                    /* Clona o item do agrupamento de produção */\n                    angular.copy(item, clone_item);\n\n                    vm.Ferramenta.Alocar(clone_item);\n\n                    if ( ! ( clone_item.QUANTIDADE_PROGRAMADA > 0 ) ) throw 'Não há mais espaço suficiente na estação para a quantidade informada.';\n\n                    \n                    /* Informa no item à programar o index do item do agrupamento que o orginiou */\n                    clone_item.INDEX_AGRUPAMENTO_ORIGEM = vm.Agrupamento.index;\n\n\n                    /* Incializar o array de produtos de consumo do items a ser programado*/\n                    var consumos = clone_item.CONSUMO_ALOCACAO;\n                    var produtos_estoque = item.ESTOQUE_PRODUTOS;\n                    \n                    /* Verifica se ha materia-prima disponivel suficiente para o item a ser programado */\n                    for ( var y in consumos ) {\n\n                        consumos[y].CONSUMO_QUANTIDADE = parseFloat(consumos[y].CONSUMO) * parseFloat(clone_item.QUANTIDADE_PROGRAMADA); \n\n                        for ( var i in produtos_estoque ) { \n                            \n                            if ( produtos_estoque[i].PRODUTO_ID == consumos[y].PRODUTO_ID ) {\n                                var produtos_estoque_disponivel = parseFloat(produtos_estoque[i].DISPONIVEL);\n                                \n                                if ( consumos[y].PROGRAMAR_SEM_ESTOQUE == 0 && produtos_estoque_disponivel < consumos[y].CONSUMO_QUANTIDADE )\n                                throw 'Não há estoque de matéria-prima disponível para esta quantidade';\n                            }\n                        }\n                    }\n                     \n                    clone_item.GP_ID              = vm.Estacao.selected.GP_ID;\n                    clone_item.GP_DESCRICAO       = vm.Estacao.selected.GP_DESCRICAO;\n                    clone_item.UP_ID              = vm.Estacao.selected.UP_ID;\n                    clone_item.UP_DESCRICAO       = vm.Estacao.selected.UP_DESCRICAO;\n                    clone_item.ESTACAO            = vm.Estacao.selected.ESTACAO;\n                    clone_item.ESTACAO_DESCRICAO  = vm.Estacao.selected.ESTACAO_DESCRICAO;\n                             \n                    \n                    estacao_update = true;\n                    \n                    /* Insere o item programado na estação */\n                    vm.Estacao.selected.itens_programados.push(clone_item);\n                    \n                    item.QUANTIDADE_PROGRAMADA = parseFloat(item.QUANTIDADE_PROGRAMADA) - parseFloat(clone_item.QUANTIDADE_PROGRAMADA);\n                    \n                    vm.Agrupamento.Utilizado(item);\n                    vm.Consumo.Disponibilidade(item);\n                    vm.Estacao.Totalizador(vm.Estacao.selected);\n                    vm.Ferramenta.Utilizado(vm.Ferramenta.selected);\n\n                }\n                catch(err) {\n                    //showErro(err + ' Operação cancelada!'); \n                }\n            },\n            Excluir : function (estacao,item) {\n                try { \n\n                    var item_index = estacao.itens_programados.indexOf(item);\n                    var estacao_item_programado = estacao.itens_programados[item_index];\n                    var agrupamento_item = vm.dados.agrupamento_itens[estacao_item_programado.INDEX_AGRUPAMENTO_ORIGEM];\n                    var linhas = vm.dados.agrupamento_linhas;\n\n                    agrupamento_item.QUANTIDADE_PROGRAMADA = parseFloat(agrupamento_item.QUANTIDADE_PROGRAMADA) + parseFloat(estacao_item_programado.QUANTIDADE_PROGRAMADA);\n\n                    estacao_update = true;\n                    \n                    estacao.itens_programados.splice(item_index, 1);\n                    \n\n                    FerramentaAlocacao(vm.dados.ferramentas);\n                    \n                    $timeout(function(){\n                        $scope.$apply(function(){\n                            for(var i in linhas)\n                            {\n                                if (agrupamento_item.LINHA_ID == linhas[i].LINHA_ID && agrupamento_item.TAMANHO == linhas[i].TAMANHO) {\n                                    vm.Linha.Select(linhas[i]);\n                                    break;\n                                }\n                            }  \n\n                            vm.Agrupamento.Select(agrupamento_item);  \n                        });\n                    },10);\n                }\n                catch(err) {\n                    showErro(err + ' Operação cancelada!'); \n                }\n            },\n            Watches : function() {\n                $scope.$on('bs-init', function(ngRepeatFinishedEvent) {\n                    bootstrapInit();\n                });\n            }\n        };\n        \n        $scope.$watch('vm.filtro.data_remessa', function (newValue, oldValue, scope) {\n            if ( newValue != null ) {\n                var data = moment(newValue);\n                var dia_semana = data.weekday();\n                if ( dia_semana == 1 ) {\n                    vm.filtro.data_disponibilidade = data.subtract(2, 'day').toDate();\n                } else {\n                    vm.filtro.data_disponibilidade = newValue; \n                }\n                    \n            }            \n        });\n        \n\n        vm.PedidoDesbloqueio = function (usuario) {\n            $ajax.post('/_22100/pedidos-desbloqueio/post',{USUARIO:usuario}).then(function(response){\n                vm.PEDIDO_BLOQUEIO_USUARIOS = response;\n            });            \n        };\n\n        function boot() {\n            \n            $ajax.get('/_22100/pedido-bloqueio-usuario').then(function(response){\n                vm.PEDIDO_BLOQUEIO_USUARIOS = response;\n            });\n        \n            // $('.container-ferramenta .table-ferramenta')\n            $('.recebe-puxador-ferramenta')\n                .resizable({\n                    resize  : function( event, ui ) {\n                        $scope.$apply(function(){\n                            $(document).resize();\n                        });\n\n                    },\n                    handles  : 's',\n                    minHeight : 114\n                })\n            ;\n        }\n        \n        boot();\n        vm.Item.Watches();\n    };\n\n    Ctrl.$inject = [\n        '$scope',\n        '$ajax',\n        '$timeout',\n        '$filter',\n        '$window',\n        '$q',\n        'gcCollection',\n        'gcObject'\n    ];\n\n    var validMaxValue = function() {\n        return {\n            require: 'ngModel',\n            restrict: 'A',\n            scope: { numberFixed:'=' },\n            link: function($scope, element, attrs, ngModel) {\n                $(document).ready(function() {\n                    $(element).change(function () { //bind the change event to hidden input\n                        if ( ngModel.$invalid ) {\n                            var max_value = parseFloat(attrs.ngMax);\n                            var new_value = parseFloat(ngModel.$viewValue);\n\n                            if ( new_value > max_value ) {\n                                element.val(max_value);\n                                $scope.$apply(function () {\n                                    ngModel.$setViewValue( max_value );\n                                });\n                            }\n                        }\n                    });\n                });\n            }\n        };\n    };\n                    \n        \n/*\n        <gc-search\n            name=\"Agrupamento de Pedidos\"\n            label=\"Agrupamento\"\n            required=\"true\"\n            columns=\"[\n                {\n                    name: 'Company',\n                    field: 'COMPANY',\n                    width: '100px'\n                },\n                {\n                    name: 'Contact',\n                    field: 'CONTACT',\n                    width: '50px'\n                },\n                {\n                    name: 'Country',\n                    field: 'COUNTRY',\n                    width: '50px'\n                }\n            ]\"\n            rows=\"[\n                {\n                    COMPANY: 'delfa',\n                    CONTACT: 'manoel',\n                    COUNTRY: 'br',\n                    OUTRO: 'teste3'\n                },\n                {\n                    COMPANY: 'empresa',\n                    CONTACT: 'emerson',\n                    COUNTRY: 'us',\n                    OUTRO: 'teste2'\n                },\n                {\n                    COMPANY: 'local',\n                    CONTACT: 'alexandre',\n                    COUNTRY: 'br',\n                    OUTRO: 'teste4'\n                },\n                {\n                    COMPANY: 'lugar',\n                    CONTACT: 'anderson',\n                    COUNTRY: 'us',\n                    OUTRO: 'teste5'\n                },\n                {\n                    COMPANY: 'lugar',\n                    CONTACT: 'anderson',\n                    COUNTRY: 'br',\n                    OUTRO: 'teste7'\n                }                \n            ]\"\n        ></gc-search>\n        \n    var gcSearch = {\n        bindings: {\n            name: '@',\n            label: '@',\n            columns: '=',\n            rows: '='\n        },\n        controller : ['$scope','$timeout', function($scope,$timeout) {\n            \n            var vm = this;\n            \n            vm.fields_filter = [];\n            \n            vm.fieldsFilter = function() {\n                for ( var i in vm.columns ) {\n                    vm.fields_filter.push(vm.columns[i].field);\n                }\n            };\n            \n            \n            vm.showModal = function ($event) {\n                \n                // Verifica se a tecla pressionada foi 'F4' \n                if ( $event.keyCode === 115 ) {\n                    vm.fieldsFilter();\n                    $('#model-search').modal();\n\n                    $event.preventDefault();\n                    return false;\n                };\n            };\n            \n            vm.fixVsRepeat = function () {\n                $timeout(function(){\n                    $('#model-search .scroll-table').scrollTop(0);\n                });  \n            };\n            \n                                \n            $('#model-search').on('shown.bs.modal', function() {\n                $('#model-search').find('input[type=\"search\"]').focus();\n                $timeout(function () {\n                    $scope.$apply(function(){\n                        $(document).resize();\n                    });\n                });\n            });\n        }],\n        templateUrl: '/gc-search' \n    };\n    \n    */\n\n    angular\n    .module    ('app'           , ['angular.filter','vs-repeat','gc-ajax','gc-form','gc-find','gc-transform', 'gc-utils'])\n    .directive ('validMaxValue' , validMaxValue )\n//    .component ('gcSearch'     , gcSearch      )\n    .controller('Ctrl'          , Ctrl          );\n        \n})(angular);\n\n\n;(function($) {\n        \n\t$(function() {    \n        \n        $('#btn-table-filter').click(function(){\n            $('#filtrar-toggle').click();\n        });\n        \n//        var scrollTimeout = null;\n//        $('.linha.scroll-table, .agrupamento.scroll-table')\n//            .on('scroll', function(event) {\n//                var that = $(this);\n//                if (scrollTimeout) clearTimeout(scrollTimeout);\n//                scrollTimeout = setTimeout(function(){\n//                    that.find('input:focus').closest('tr').click();\n//                },50);\n//            })\n//        ;\n        \n        $(document).on('click', 'tr', function() {\n            var input = $(this).find('input[type=\"number\"]');\n//            input.focus();\n            input.select();\n        });\n        \n\t\t$(document)\n            .on('keydown', \n                'table tbody tr', \n                'up', \n                function(e) {  \n                    \n                    var tr = $(this);\n                    var scrollTimeout = null;\n                    if (scrollTimeout) clearTimeout(scrollTimeout);\n                    scrollTimeout = setTimeout(function(){\n                        $('tr input:focus').closest('tr').click();\n                    },10);\n                    \n                    return false;\n                }\n            )\n            .on('keydown', \n                'table tbody tr',\n                'down',\n                function(e) {\n\n                    var scrollTimeout = null;\n                    if (scrollTimeout) clearTimeout(scrollTimeout);\n                    scrollTimeout = setTimeout(function(){\n                        $('tr input:focus').closest('tr').click();\n                    },10);\n\n                    return false;\n                }\n            )\n            .on('keydown', \n                'body', \n                'f1', \n                function(e) {  \n                    $('.linha-container .linha')\n                        .find('tr.selected')\n                        .find('button')\n                        .click()\n                    ;\n                    \n//                    return false;\n                }\n            )\n            .keypress(\n                function(event) { \n                    var keycode = event.keyCode || event.which;\n                    if(keycode == '13') {\n                        $('.linha-container .linha')\n                            .find('tr.selected')\n                            .find('button')\n                            .click()\n                        ;\n\n                        return false;\n                    }\n                }\n            )\n            .on('keydown', \n                'body', \n                '*', \n                function(e) {  \n                    $('.check.agrupamento')\n                        .click()\n                    ;\n                    \n                    return false;\n                }\n            )\n            .on('keydown', \n                'body', \n                '+', \n                function(e) {  \n                    $('.agrupamento.scroll-table')\n                        .find('.tr-agrupamento.selected')\n                        .find('td.check')\n                        .click()\n                    ;\n                    \n                    return false;\n                }\n            )\n        ;\n\t});\n})(jQuery);\n"]}