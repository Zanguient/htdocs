{"version":3,"sources":["formatter.js"],"names":[],"mappingsfile":"formatter.js","sourcesContent":["/**\n * Script para formatações de variáveis.\n */\n\n/**\n * Formata número para o padrão brasileiro.\n * Ex.: 1000.0000 -> 1.000,0000\n * \n * @param {string} int\n * @returns {string}\n */\nfunction formataReal(int) {\n\t\n\tvar tmp = int + '';\n\ttmp = tmp.replace('.', '');\n\ttmp = tmp.replace(/([0-9]{4})$/g, \",$1\");\n\n\tif (tmp.length > 8)\n\t\ttmp = tmp.replace(/([0-9]{3}),([0-9]{4}$)/g, \".$1,$2\");\n\n\treturn tmp;\n\t\n}\n\n/**\n * Formata número para o formato padrão do javascript.\n * Ex.: 1.000,00 -> 1000.00\n * \n * @param {string} num\n * @returns {float}\n */\nfunction formataPadrao(num) {\n\t\n\treturn parseFloat(num.replace('.', '').replace(',', '.'));\n\t\n}\n\n/**\n * Formata número para o formato padrão brasileiro.\n * Ex.: 10.5 -> 10,5\n * \n * @param {string} num\n * @returns {string}\n */\nfunction formataPadraoBr(num) {\n    if(num != ''){\n        num = String(num);\n        return num.replace('.', ',');\n    }else{\n        return '0';\n    }\n}\n\nfunction SomenteNumeroePonto(obj,e,decimal){\n\t\n\tvar tecla=(window.event)?event.keyCode:e.which;\n\n\tvar texto = $(obj).val();\n\tvar tecla = ( window.event ) ? e.keyCode : e.which;\n\tvar quant = decimal-1;\n\n\tPositionC = doGetCaretPosition(obj);\n\tPositionV = texto.indexOf(\",\")+1;\n\n\tvar res = texto.substring(PositionV);\n\n\tif ( (tecla === 44) && (quant === -1))\n\t   return false;\n\n\tif ( tecla === 44)\n\t\tif (texto.indexOf(\",\") !== -1)\n\t\t\treturn false;\n\n\tif ( tecla === 8 || tecla === 0 )\n\t\treturn true;\n\tif ( tecla !== 44 && tecla < 48 || tecla > 57 )\n\t\treturn false;\n\n\tif (PositionV > 0)\n\t\tif (PositionC >= PositionV)\n\t\t\tif ( tecla !== 44)\n\t\t\t\tif (res.length > quant)\n\t\t\t\t\treturn false;\n\n}\n\n/**\n * Separa uma string em parametros\n * @param {string} string\n * @param {string} separador\n * @param {string} divisor\n * @returns {object array}\n */\nfunction paramSplit(string,separador,divisor) {\n    separador = separador || '=';\n    divisor   = divisor   || '&';\n\n    var list = string.split(divisor);\n    var hash = {};\n\n    for(var i = 0; i < list.length; i++){\n        var parametro = list[i].split(separador);\n        var chave = parametro[0];\n        var valor = parametro[1];\n        hash[chave] = valor;\n    }   \n    return hash;\n}  \n\n//function number_format( numero, decimal, decimal_separador, milhar_separador ){\t\n//    numero = parseFloat(numero.replace('.', '').replace(',', '.'));\n//    numero = (numero + '').replace(/[^0-9+\\-Ee.]/g, '');\n//    var n = !isFinite(+numero) ? 0 : +numero,\n//        prec = !isFinite(+decimal) ? 0 : Math.abs(decimal),\n//        sep = (typeof milhar_separador === 'undefined') ? ',' : milhar_separador,\n//        dec = (typeof decimal_separador === 'undefined') ? '.' : decimal_separador,\n//        s = '',\n//        toFixedFix = function (n, prec) {\n//            var k = Math.pow(10, prec);\n//            return '' + Math.round(n * k) / k;\n//        };\n//    // Fix para IE: parseFloat(0.55).toFixed(0) = 0;\n//    s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.');\n//    if (s[0].length > 3) {\n//        s[0] = s[0].replace(/\\B(?=(?:\\d{3})+(?!\\d))/g, sep);\n//    }\n//    if ((s[1] || '').length < prec) {\n//        s[1] = s[1] || '';\n//        s[1] += new Array(prec - s[1].length + 1).join('0');\n//    }\n//\n//    return s.join(dec);\n//}\n\nfunction number_format (number, decimals, decPoint, thousandsSep) { // eslint-disable-line camelcase\n  //  discuss at: http://locutus.io/php/number_format/\n  // original by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)\n  // improved by: Kevin van Zonneveld (http://kvz.io)\n  // improved by: davook\n  // improved by: Brett Zamir (http://brett-zamir.me)\n  // improved by: Brett Zamir (http://brett-zamir.me)\n  // improved by: Theriault (https://github.com/Theriault)\n  // improved by: Kevin van Zonneveld (http://kvz.io)\n  // bugfixed by: Michael White (http://getsprink.com)\n  // bugfixed by: Benjamin Lupton\n  // bugfixed by: Allan Jensen (http://www.winternet.no)\n  // bugfixed by: Howard Yeend\n  // bugfixed by: Diogo Resende\n  // bugfixed by: Rival\n  // bugfixed by: Brett Zamir (http://brett-zamir.me)\n  //  revised by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)\n  //  revised by: Luke Smith (http://lucassmith.name)\n  //    input by: Kheang Hok Chin (http://www.distantia.ca/)\n  //    input by: Jay Klehr\n  //    input by: Amir Habibi (http://www.residence-mixte.com/)\n  //    input by: Amirouche\n  //   example 1: number_format(1234.56)\n  //   returns 1: '1,235'\n  //   example 2: number_format(1234.56, 2, ',', ' ')\n  //   returns 2: '1 234,56'\n  //   example 3: number_format(1234.5678, 2, '.', '')\n  //   returns 3: '1234.57'\n  //   example 4: number_format(67, 2, ',', '.')\n  //   returns 4: '67,00'\n  //   example 5: number_format(1000)\n  //   returns 5: '1,000'\n  //   example 6: number_format(67.311, 2)\n  //   returns 6: '67.31'\n  //   example 7: number_format(1000.55, 1)\n  //   returns 7: '1,000.6'\n  //   example 8: number_format(67000, 5, ',', '.')\n  //   returns 8: '67.000,00000'\n  //   example 9: number_format(0.9, 0)\n  //   returns 9: '1'\n  //  example 10: number_format('1.20', 2)\n  //  returns 10: '1.20'\n  //  example 11: number_format('1.20', 4)\n  //  returns 11: '1.2000'\n  //  example 12: number_format('1.2000', 3)\n  //  returns 12: '1.200'\n  //  example 13: number_format('1 000,50', 2, '.', ' ')\n  //  returns 13: '100 050.00'\n  //  example 14: number_format(1e-8, 8, '.', '')\n  //  returns 14: '0.00000001'\n\n  number = (number + '').replace(/[^0-9+\\-Ee.]/g, '')\n  var n = !isFinite(+number) ? 0 : +number\n  var prec = !isFinite(+decimals) ? 0 : Math.abs(decimals)\n  var sep = (typeof thousandsSep === 'undefined') ? ',' : thousandsSep\n  var dec = (typeof decPoint === 'undefined') ? '.' : decPoint\n  var s = ''\n\n  var toFixedFix = function (n, prec) {\n    var k = Math.pow(10, prec)\n    return '' + (Math.round(n * k) / k)\n      .toFixed(prec)\n  }\n\n  // @todo: for IE parseFloat(0.55).toFixed(0) = 0;\n  s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.')\n  if (s[0].length > 3) {\n    s[0] = s[0].replace(/\\B(?=(?:\\d{3})+(?!\\d))/g, sep)\n  }\n  if ((s[1] || '').length < prec) {\n    s[1] = s[1] || ''\n    s[1] += new Array(prec - s[1].length + 1).join('0')\n  }\n\n  return s.join(dec)\n}\n\n/**\n * Retorna as palavras contidas no intervalo.\n * Ex.: \n *\t\tpalavra = Lorem ipsum dolor sit amet consectetur adipiscing elit.\n *\t\tinicio = 0\n *\t\tfim = 2\n *\t\tretorno = Lorem ipsum\n * \n * @param {string} palavra\n * @param {integer} inicio\n * @param {integer} fim\n * @returns {string}\n */\nfunction pegarPalavra(palavra, inicio, fim) {\n\t\n\treturn\tpalavra\n\t\t\t\t.split(/\\s+/)\n\t\t\t\t.slice(inicio, fim)\n\t\t\t\t.join(' ')\n\t\t\t;\n\t\n}"]}